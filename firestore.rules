rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for UI
      // Allow test documents with TEST- prefix for development/testing
      allow read, write, delete: if request.auth != null && userId.matches('^TEST-.*');
      
      // Allow server-side user creation during registration
      // This is needed for creating user profiles before Firebase Auth user exists
      allow create: if true;
    }
    
    // Authorized personnel collection - for admin management and registration verification
    match /authorized_personnel/{documentId} {
      // Allow read access for registration verification (server-side API)
      // This is needed for military ID verification during user registration
      allow read: if true;
      
      // Restrict write operations to authenticated users only (admin panel)
      allow write, create, delete: if request.auth != null;
    }
    
    // Admin config collection - for admin authentication
    match /admin_config/{documentId} {
      allow read, write: if request.auth != null;
    }
    
    // OTP sessions collection - for phone verification during registration
    match /otp_sessions/{phoneNumber} {
      // Allow server-side operations for OTP verification
      // These operations happen during registration before user authentication
      allow read, write, create, delete: if true;
    }
    
    // OTP rate limiting collection - for preventing spam
    match /otp_rate_limits/{phoneNumber} {
      // Allow server-side operations for rate limiting
      // These operations happen during registration before user authentication  
      allow read, write, create, delete: if true;
    }
    
    // Test collection - for development testing only
    match /test/{testId} {
      allow read, write: if request.auth != null && isAuthorizedUser(request.auth.uid);
    }
    
    // Equipment collection - military equipment management
    match /equipment/{equipmentId} {
      // Allow read access to authenticated and authorized users only
      allow read: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canAccessEquipment(request.auth.uid);
      
      // Allow creation only by authenticated, authorized users with proper validation
      allow create: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canManageEquipment(request.auth.uid)
        && validateEquipmentCreate(request.resource.data)
        && validateRequiredEquipmentFields(request.resource.data);
      
      // Allow updates only by authenticated, authorized users with validation
      allow update: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canManageEquipment(request.auth.uid)
        && validateEquipmentUpdate(resource.data, request.resource.data)
        && validateRequiredEquipmentFields(request.resource.data);
      
      // Allow deletion ONLY for test documents by authorized equipment managers
      allow delete: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canManageEquipment(request.auth.uid)
        && (equipmentId.matches('TEST-.*') || equipmentId.matches('DEBUG-.*'));
    }
    
    // Retirement requests
    match /retirement_requests/{requestId} {
      allow read: if request.auth != null && isAuthorizedUser(request.auth.uid);
      allow create: if request.auth != null && isAuthorizedUser(request.auth.uid);
      allow update: if request.auth != null && canApproveRetirement(request.auth.uid);
      allow delete: if false;
    }
    
    // Item types collection - equipment templates for the system
    match /itemTypes/{itemTypeId} {
      // Allow read access to authenticated and authorized users for equipment management
      allow read: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canAccessEquipment(request.auth.uid);
      
      // Allow creation only by authenticated, authorized equipment managers/admins
      allow create: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canManageItemTypes(request.auth.uid)
        && validateItemTypeCreate(request.resource.data)
        && validateRequiredItemTypeFields(request.resource.data);
      
      // Allow updates only by authenticated, authorized equipment managers/admins  
      allow update: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canManageItemTypes(request.auth.uid)
        && validateItemTypeUpdate(resource.data, request.resource.data)
        && validateRequiredItemTypeFields(request.resource.data);
      
      // Allow deletion only for test documents by authorized equipment managers
      allow delete: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && canManageItemTypes(request.auth.uid)
        && (itemTypeId.matches('TEST-.*') || itemTypeId.matches('DEBUG-.*'));
    }
    
    // Helper functions
    function isAuthorizedUser(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }
    
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    
    function canApproveRetirement(uid) {
      let role = getUserRole(uid);
      return role in ['equipment_manager', 'commander'];
    }
    
    function canManageItemTypes(uid) {
      let role = getUserRole(uid);
      return role in ['equipment_manager', 'commander', 'admin'];
    }
    
    function canAccessEquipment(uid) {
      // All authenticated users can read equipment, but write access is restricted
      let role = getUserRole(uid);
      return role in ['soldier', 'officer', 'equipment_manager', 'commander', 'admin'];
    }
    
    function canManageEquipment(uid) {
      // Only equipment managers, commanders, and admins can create/update equipment
      let role = getUserRole(uid);
      return role in ['equipment_manager', 'commander', 'admin'];
    }
    
    function validateItemTypeCreate(data) {
      return data.keys().hasAll(['id', 'category', 'model', 'manufacturer', 'assignmentType', 'defaultDepot', 'defaultStatus'])
        && data.id is string
        && data.category is string
        && data.model is string
        && data.manufacturer is string
        && data.assignmentType in ['team', 'personal']
        && data.defaultDepot is string
        && data.defaultStatus is string;
    }
    
    function validateItemTypeUpdate(before, after) {
      // Ensure required fields are not removed and ID cannot be changed
      return after.keys().hasAll(['id', 'category', 'model', 'manufacturer', 'assignmentType', 'defaultDepot', 'defaultStatus'])
        && after.id == before.id // Cannot change ID
        && after.createdAt == before.createdAt; // Cannot change creation date
    }
    
    function validateRequiredItemTypeFields(data) {
      // Validate that all required fields are present and have correct types/values
      return data.id is string && data.id.size() > 0
        && data.category is string && data.category.size() > 0
        && data.model is string && data.model.size() > 0
        && data.manufacturer is string && data.manufacturer.size() > 0
        && data.assignmentType in ['team', 'personal']
        && data.defaultDepot is string && data.defaultDepot.size() > 0
        && data.defaultStatus is string && data.defaultStatus.size() > 0;
    }
    
    function validateRequiredEquipmentFields(data) {
      // Validate that all required fields are present and have correct types/values
      return data.id is string && data.id.size() > 0
        && data.itemTypeId is string && data.itemTypeId.size() > 0
        && data.category is string && data.category.size() > 0
        && data.assignmentType in ['team', 'personal']
        && data.status is string && data.status.size() > 0
        && data.assignedUserId is string && data.assignedUserId.size() > 0
        && data.equipmentDepot is string && data.equipmentDepot.size() > 0;
    }
    
    function validateEquipmentCreate(data) {
      return data.keys().hasAll(['id', 'itemTypeId', 'category', 'model', 'manufacturer', 'assignmentType', 'equipmentDepot', 'assignedUserId', 'status', 'registeredAt'])
        && data.id is string
        && data.itemTypeId is string
        && data.category is string
        && data.model is string
        && data.manufacturer is string
        && data.assignmentType in ['team', 'personal']
        && data.equipmentDepot is string
        && data.assignedUserId is string
        && data.status is string
        && data.registeredAt != null;
    }
    
    function validateEquipmentUpdate(before, after) {
      // Ensure required fields are not removed and core data cannot be changed
      return after.keys().hasAll(['id', 'itemTypeId', 'category', 'model', 'manufacturer', 'assignmentType', 'equipmentDepot', 'assignedUserId', 'status', 'registeredAt'])
        && after.id == before.id // Cannot change ID
        && after.itemTypeId == before.itemTypeId // Cannot change item type reference
        && after.category == before.category // Cannot change category
        && after.model == before.model // Cannot change model
        && after.manufacturer == before.manufacturer // Cannot change manufacturer
        && after.registeredAt == before.registeredAt // Cannot change registration date
        && after.createdAt == before.createdAt; // Cannot change creation date
    }
  }
} 