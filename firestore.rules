rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    
    // Users collection - users can read/write their own data
    match /users/{userId} {
      allow read, write: if request.auth != null && request.auth.uid == userId;
      allow read: if request.auth != null; // Allow reading other users for UI
      // Allow test documents with TEST- prefix for development/testing
      allow read, write, delete: if request.auth != null && userId.matches('^TEST-.*');
      
      // Allow server-side user creation during registration
      // This is needed for creating user profiles before Firebase Auth user exists
      allow create: if true;
    }
    
    // Authorized personnel collection - for admin management and registration verification
    match /authorized_personnel/{documentId} {
      // Allow read access for registration verification (server-side API)
      // This is needed for military ID verification during user registration
      allow read: if true;
      
      // Restrict write operations to authenticated users only (admin panel)
      allow write, create, delete: if request.auth != null;
    }
    
    // Admin config collection - for admin authentication
    match /admin_config/{documentId} {
      allow read, write: if request.auth != null;
    }
    
    // OTP sessions collection - for phone verification during registration
    match /otp_sessions/{phoneNumber} {
      // Allow server-side operations for OTP verification
      // These operations happen during registration before user authentication
      allow read, write, create, delete: if true;
    }
    
    // OTP rate limiting collection - for preventing spam
    match /otp_rate_limits/{phoneNumber} {
      // Allow server-side operations for rate limiting
      // These operations happen during registration before user authentication  
      allow read, write, create, delete: if true;
    }
    
    // Test collection - for development testing only
    match /test/{testId} {
      allow read, write: if request.auth != null && isAuthorizedUser(request.auth.uid);
    }
    
    // Equipment collection
    match /equipment/{equipmentId} {
      // Allow read access to authenticated users
      allow read: if request.auth != null && isAuthorizedUser(request.auth.uid);
      
      // Allow write access only to authorized users
      allow create: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && validateEquipmentCreate(request.resource.data);
      
      allow update: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && validateEquipmentUpdate(resource.data, request.resource.data);
      
      // Allow deletion ONLY for test documents (DEBUG- or TEST- prefix)
      allow delete: if request.auth != null 
        && isAuthorizedUser(request.auth.uid)
        && (equipmentId.matches('DEBUG-.*') || equipmentId.matches('TEST-.*'));
    }
    
    // Retirement requests
    match /retirement_requests/{requestId} {
      allow read: if request.auth != null && isAuthorizedUser(request.auth.uid);
      allow create: if request.auth != null && isAuthorizedUser(request.auth.uid);
      allow update: if request.auth != null && canApproveRetirement(request.auth.uid);
      allow delete: if false;
    }
    
    // Helper functions
    function isAuthorizedUser(uid) {
      return exists(/databases/$(database)/documents/users/$(uid));
    }
    
    function getUserRole(uid) {
      return get(/databases/$(database)/documents/users/$(uid)).data.role;
    }
    
    function canApproveRetirement(uid) {
      let role = getUserRole(uid);
      return role in ['equipment_manager', 'commander'];
    }
    
    function validateEquipmentCreate(data) {
      return data.keys().hasAll(['id', 'productName', 'category', 'currentHolder', 'assignedUnit', 'status', 'condition'])
        && data.id is string
        && data.productName is string
        && data.category is string
        && data.currentHolder is string
        && data.assignedUnit is string
        && data.status in ['active', 'lost', 'broken', 'maintenance', 'retired', 'pending_transfer', 'pending_retirement']
        && data.condition in ['excellent', 'good', 'fair', 'poor', 'damaged', 'broken'];
    }
    
    function validateEquipmentUpdate(before, after) {
      // Ensure required fields are not removed
      return after.keys().hasAll(['id', 'productName', 'category', 'currentHolder', 'assignedUnit', 'status', 'condition'])
        && after.id == before.id // Cannot change ID
        && after.createdAt == before.createdAt // Cannot change creation date
        && after.trackingHistory.size() >= before.trackingHistory.size(); // Can only add to history, not remove
    }
  }
} 