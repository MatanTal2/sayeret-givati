import { Timestamp } from 'firebase/firestore';

/**
 * Notification Types
 * Defines the structure and types for the real-time notification system
 */

export interface Notification {
  id: string; // autogenerated Firestore document ID
  userId: string; // user who should receive this notification
  type: NotificationType;
  title: string; // short title, e.g., "בקשת העברה חדשה"
  message: string; // full message, e.g., "מתן טל העביר לך את הציוד רובה M4A1"
  relatedEquipmentId?: string; // equipment serial number/display ID
  relatedEquipmentDocId?: string; // Firestore document ID
  relatedTransferId?: string; // transfer request ID
  equipmentName?: string; // denormalized field for UI display
  isRead: boolean; // default false
  createdAt: Timestamp;
  readAt?: Timestamp; // when the notification was marked as read
}

export enum NotificationType {
  TRANSFER_REQUEST = 'transfer_request',
  TRANSFER_APPROVED = 'transfer_approved',
  TRANSFER_REJECTED = 'transfer_rejected',
  TRANSFER_COMPLETED = 'transfer_completed',
  EQUIPMENT_UPDATE = 'equipment_update',
  EQUIPMENT_STATUS_CHANGE = 'equipment_status_change',
  SYSTEM_MESSAGE = 'system_message',
  MAINTENANCE_DUE = 'maintenance_due',
  COMMANDER_MESSAGE = 'commander_message',
  DAILY_CHECK_REMINDER = 'daily_check_reminder'
}

export interface CreateNotificationData {
  title: string;
  message: string;
  relatedEquipmentId?: string;
  relatedEquipmentDocId?: string;
  relatedTransferId?: string;
  equipmentName?: string;
}

export interface NotificationServiceResult {
  success: boolean;
  message?: string;
  error?: string;
  notificationId?: string;
}

// Notification context types
export interface NotificationContextType {
  notifications: Notification[];
  unreadCount: number;
  isLoading: boolean;
  markAsRead: (notificationId: string) => Promise<void>;
  markAllAsRead: () => Promise<void>;
  deleteNotification: (notificationId: string) => Promise<void>;
  refreshNotifications: () => Promise<void>;
}

// Hook return type
export type UseNotificationsReturn = NotificationContextType;

// Notification display helpers
export interface NotificationDisplayData {
  id: string;
  title: string;
  message: string;
  type: NotificationType;
  isRead: boolean;
  createdAt: Date;
  timeAgo: string;
  icon: string;
  color: string;
  equipmentName?: string;
}

// Notification settings
export interface NotificationSettings {
  emailNotifications: boolean;
  transferAlerts: boolean;
  systemMessages: boolean;
  maintenanceReminders: boolean;
  dailyCheckReminders: boolean;
}

// Batch notification operations
export interface BatchNotificationData {
  userIds: string[];
  type: NotificationType;
  data: CreateNotificationData;
}

export interface NotificationTemplate {
  type: NotificationType;
  titleTemplate: string;
  messageTemplate: string;
  variables: string[];
}

// Notification filters and queries
export interface NotificationFilters {
  isRead?: boolean;
  type?: NotificationType;
  dateFrom?: Date;
  dateTo?: Date;
  limit?: number;
}

// Real-time subscription management
export interface NotificationSubscription {
  userId: string;
  unsubscribe: () => void;
  isActive: boolean;
}
